{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Modul Implantacio de Aplicacions Web","text":""},{"location":"#ies-jaume-ii-el-just","title":"IES Jaume II El Just","text":""},{"location":"#curso-20242025","title":"Curso 2024/2025","text":"<p>Alumno:- Jordi Corbi Mico -</p> <p>jorcormic@alu.edu.gva.es</p>"},{"location":"#contenidos","title":"Contenidos","text":"<p>Contenidos del Modul</p> <ul> <li>Unidad 1: Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web. Ver<ul> <li>Introducci\u00f3n</li> <li>Git y Github</li> <li>Markdown y MkDocs.</li> </ul> </li> <li>Unidad 2: Implantaci\u00f3n de aplicaciones web PHP<ul> <li>Implantaci\u00f3n web en un servidor LAMP</li> <li>Arquitectura de un nivel</li> <li>Arquitectura de dos niveles</li> <li>Protocolo HTTP/HTTPS</li> <li>Implantaci\u00f3n web en un servidor LEMP</li> <li>Balanceadores de carga con NGINX</li> <li>Instancias ECS en AWS</li> </ul> </li> <li>Unidad 3: Docker para la implantaci\u00f3n WEB<ul> <li>Aplicaciones web con Docker</li> <li>Despliegue de aplicaciones web en arquitectura de dos niveles con Docker y Docker Compose</li> </ul> </li> <li>Unidad 4: Fundamentos de programaci\u00f3n en PHP<ul> <li>El lenguaje de programaci\u00f3n PHP</li> <li>Sint\u00e1xis, variables, estructuras y funciones</li> <li>Acceso y manipulaci\u00f3n de bases de datos con PHP</li> </ul> </li> <li>Unidad 5: Instalaci\u00f3n y modificaci\u00f3n de gestores de contenidos<ul> <li>Instalar y configurar un CMS</li> <li>Modificar la apariencia de un CMS</li> <li>Creaci\u00f3n de Plugins personalizados para un CMS.</li> </ul> </li> </ul>"},{"location":"Unidad_1/Practicas/Unidad_1/","title":"Unidad 1 Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web","text":""},{"location":"Unidad_1/Practicas/Practica_1/Practica_1/","title":"Pr\u00e1ctica 1: Git. Trabajando con ramas y uniones","text":"<p>Objectius</p> <p>En esta pr\u00e0ctica desplegarem una p\u00e0gina web est\u00e0tica amb MkDocs en GitHub *Pages. Com esta que est\u00e0s veient. Per a aix\u00f2, haur\u00e0s de seguir els seg\u00fcents passos:</p> <ul> <li>Aprendr\u00e0s el concepte de branca.</li> <li>La gesti\u00f3 i el cicle de vida (creaci\u00f3, modificaci\u00f3, esborrament, \u2026) de branques.</li> <li>Aprendr\u00e0s el concepte d'uni\u00f3 (*merge) que ens possibilita la fusi\u00f3 de branques.</li> <li>A solucionar els possibles conflictes que poden apar\u00e9ixer en el moment del *merge.</li> </ul>"},{"location":"Unidad_1/Practicas/Practica_1/Practica_1/#entrega","title":"Entrega","text":"<ol> <li>Crea una rama que se llame primera en tu local, y ejecuta la instrucci\u00f3n necesaria para comprobar que se ha creado. <p>Creacion de la rama: <code>$ git checkout -b [nombre de la rama]</code> Comprobacion de la rama: <code>$ git branch</code></p> </li> <li>Crea un nuevo fichero en esta rama y fusi\u00f3nalo con la principal. \u00bfSe ha producido conflicto? Razona la respuesta <p>Cambiar de rama: <code>$ git checkout primera</code> Creacion del fichero: <code>$ nano fichero</code>     No se ha producido ningun conflicto. Ja que el fichero que estamos a\u00f1adiendo a la rama main no estaba creado.</p> </li> <li>Borra la rama primera. <p>Borrar rama primera: <code>$ git branch -d primera</code></p> </li> <li>Crea una rama que se llame segunda, y modifica un fichero en ella para producir un conflicto al unirlo a la rama principal. Entrega el contenido del fichero donde se ha producido el conflicto. <p>Creacion de la rama: <code>$ git checkout -b segunda</code> Cambiar de rama: <code>$ git checkout segunda</code> Modificar fichero: <code>$ nano fichero</code> Fusionar ramas: <code>$ git merge segunda</code> Comprovar el conficto: <code>$ git diff</code></p> </li> <li>Soluciona el conflicto que has creado en el punto anterior y sincroniza la rama segunda en el remoto. <p>Solucionar el conflicto:    Para solucionar el conflicto hacemos un <code>$ git diff</code> y saldra donde esta dando el error veremos que el error esta en el fichero que modificamos anteriormente solo tenemos que volver a editar-lo i tendremos solucionado el fallo.</p> </li> </ol>"},{"location":"Unidad_1/Practicas/Practica_2/Practica_2/","title":"Pr\u00e1ctica 2: Pull Request. \u00bfC\u00f3mo colaborar en un proyecto de software libre?","text":"<p>Objectius</p> <p>En esta pr\u00e1ctica vamos a desplegar una p\u00e1gina web est\u00e1tica con MkDocs en GitHub Pages. Como esta que est\u00e1s viendo. Para ello, deber\u00e1s seguir los siguientes pasos:</p> <ul> <li>Conocer el concepto de Pull Request.</li> <li>Conocer la metodolog\u00eda para colaborar en proyectos alojados en GitHub realizando Pull Requests.</li> </ul>"},{"location":"Unidad_1/Practicas/Practica_2/Practica_2/#entregar","title":"Entregar","text":"<ol> <li>Documentaci\u00f3n de los pasos fundamentales (con instrucciones) para realizar el pull request.</li> <li>Lo primero es hacer un fork del repositorio al que quieres contribuir.    </li> <li>Nos creara un nuevo repositorio en la cuenta de el usuario.     </li> <li> <p>Una vez que hemos copiado el repositorio a nuestra cuenta, podemos clonar ese repositorio.        Para realizar la clonaci\u00f3n ejecutamos:</p> <p><code>git clone git@github.com:jcorbii/practica-pr-asix.git</code></p> </li> <li> <p>A continuaci\u00f3n vamos a crear una nueva rama, donde realizaremos los cambios que posteriormente propondremos como cambios. Para crear la rama ejecutamos:</p> <p><code>git checkout -b cambios</code> </p> </li> </ol>"},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/","title":"practica-pr-asix","text":""},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/files/jcm/","title":"\u00bfQue assignatura te gusta m\u00e1s? \u00bfporque?","text":""},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/files/jcm/#la-assignatura-que-me-gusta-mas-es-la-de-seguridad-i-alta-disponibilidad","title":"La assignatura que me gusta mas es la de Seguridad i Alta Disponibilidad.","text":"<ol> <li>Es una assignatura que me encanta</li> <li>Quiero especializarme en temas de seguridad</li> <li>No me cuesta nada esta assignatura</li> </ol>"},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/files/smm/","title":"Smm","text":"<p>Samuel Mascarell</p>"},{"location":"Unidad_1/Practicas/Practica_3/Practica_3/","title":"Pr\u00e1ctica 3 - Despliegue de una p\u00e1gina web est\u00e1tica con Mkdocs y GitHub Pages","text":"<p>Objectivos</p> <p>En esta pr\u00e1ctica vamos a desplegar una p\u00e1gina web est\u00e1tica con MkDocs en GitHub Pages. Como esta que est\u00e1s viendo. Para ello, deber\u00e1s seguir los siguientes pasos:</p> <ul> <li>Aprender a utilizar MarkDown</li> <li>Aprender a utilizar MkDocs</li> <li>Aprender a utilizar GitHub Pages</li> <li>Desplegar una p\u00e1gina web est\u00e1tica</li> </ul>"},{"location":"Unidad_1/Practicas/Practica_3/Practica_3/#entrega","title":"Entrega","text":"<ol> <li> <p>Crea un nuevo proyecto de MkDocs en tu ordenador.</p> <ol> <li> <p>Primero, aseg\u00farate de tener MkDocs instalado en tu ordenador. Si no lo tienes, puedes instalarlo con pip:</p> <p><code>$ pip install mkdocs</code> </p> </li> <li> <p>Luego, crea un nuevo proyecto de MkDocs usando el siguiente comando:</p> <p><code>mkdocs new web</code></p> <p><code>cd web</code></p> </li> </ol> <p>Esto crear\u00e1 una carpeta con el nombre del proyecto y generar\u00e1 una estructura b\u00e1sica con el archivo mkdocs.yml (para la configuraci\u00f3n) y una carpeta docs que contendr\u00e1 los archivos Markdown para la documentaci\u00f3n.</p> </li> <li> <p>Escribe la documentaci\u00f3n de tu proyecto en formato Markdown.</p> <p>La documentacion de el projecto esta ja echa en la practica 1 y la practica 2</p> </li> <li> <p>Genera la p\u00e1gina web con MkDocs</p> <p><code>mkdocs new nombre-del-proyecto</code></p> <p>Esto crear\u00e1 una estructura b\u00e1sica de directorios.</p> <p>Estructura del proyecto MkDocs</p> <p>Dentro del directorio de tu proyecto, ver\u00e1s un archivo mkdocs.yml y una carpeta docs, donde deber\u00e1s colocar tus archivos .md.</p> <p>A\u00f1adir documentaci\u00f3n</p> <p>Copia tu documentaci\u00f3n Markdown a la carpeta docs. Aseg\u00farate de que los nombres de los archivos sean claros y representativos.</p> <p>Configurar mkdocs.yml </p> <p>Aseg\u00farate de que tu archivo mkdocs.yml tenga la configuraci\u00f3n correcta. Aqu\u00ed hay un ejemplo b\u00e1sico:</p> </li> <li> <p>Crea un repositorio en GitHub para tu proyecto.</p> <p>Repositorio para mi proyecto.  </p> </li> <li> <p>Sube la p\u00e1gina web a GitHub Pages.</p> <p>Para subir la pagina web a GitHub Pages ahi que hacer:</p> <p><code>mkdocs gh-deploy</code></p> <p>Al hacer el <code>gh-deploy</code> aparecera en nuestro GitHub una rama que se llamara gh-pages.</p> <p></p> <p>Luego tendremos que ir a settings y dentro de al apartadado de pages.Y ya solo tenemos que probar si funciona la URL.</p> <p></p> </li> <li> <p>Comprueba que la URL de tu p\u00e1gina web en GitHub Pages funciona correctamente.</p> <p>URL GitHub</p> </li> </ol>"},{"location":"Unidad_2/Unidad_2/","title":"Unidad 2 Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web","text":""},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/","title":"Practica 1:Implantaci\u00f3n de una web est\u00e1tica con Apache","text":"<p>Objetivos de la pr\u00e1ctica</p> <ul> <li>Instalar y configurar un servidor web Apache2.</li> <li>Crear distintos Host Virtuales en apache2 que nos permiten tener sitios web diferenciados.</li> <li>Acceder a cada Host Virtual con un determinado nombre de dominio.</li> </ul>"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#1-configuracio-de-host-virtuals-en-apache2","title":"1. Configuracio de Host virtuals en Apache2","text":"<p>Crea el directorio para www.iaw2425.org de la siguiente manera: <pre><code>$ sudo mkdir -p /var/www/www.iaw2425.org\n$ sudo mkdir -p /var/www/www.docu-iaw2425.org\n</code></pre> A continuaci\u00f3n, asigna la propiedad del directorio al usuario con el que has iniciado sesi\u00f3n actualmente con la variable de entorno $USER: <pre><code>$ sudo chown -R $USER:$USER /var/www/www.iaw2425.org\n$ sudo chown -R $USER:$USER /var/www/www.docu-iaw2425.org\n</code></pre></p>"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#11-configuracion-pagina-wwwiaw2425org","title":"1.1 Configuracion  pagina www.iaw2425.org","text":"<p>Para la parte de la Web vamos a copiar el site de nuestra pagina web en Mkdocs. Ya que asi podremos ver algo quando intentemos acceder. </p> <p>Para que Apache sirva este contenido, es necesario crear un archivo de host virtual con las directivas correctas. En lugar de modificar el archivo de configuraci\u00f3n predeterminado ubicado en <code>/etc/apache2/sites-available/000-default.conf</code> directamente, crea uno nuevo en <code>/etc/apache2/sites-available/www.iaw2425.org.conf</code>: <pre><code>$ sudo nano /etc/apache2/sites-available/www.iaw2425.org.conf\n</code></pre> <pre><code>&lt;VirtualHost *:8080&gt;\n        ServerAdmin jordi@iaw2425.org\n        ServerName iaw2425.org\n        ServerAlias www.iaw2425.org\n        DocumentRoot /var/www/www.iaw2425.org/site\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> </p>"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#12-configuracion-pagina-wwwdocu-iaw2425org","title":"1.2 Configuracion  pagina www.docu-iaw2425.org","text":"<p>Para la parte de la Web vamos a copiar el site de nuestra pagina web en Mkdocs. Ya que asi podremos ver algo quando intentemos acceder. </p> <p>Para que Apache sirva este contenido, es necesario crear un archivo de host virtual con las directivas correctas. En lugar de modificar el archivo de configuraci\u00f3n predeterminado ubicado en <code>/etc/apache2/sites-available/000-default.conf</code> directamente, crea uno nuevo en <code>/etc/apache2/sites-available/www.docu-iaw2425.org.conf</code>: <pre><code>$ sudo nano /etc/apache2/sites-available/www.docu-iaw2425.org.conf\n</code></pre> <pre><code>&lt;VirtualHost *:8081&gt;\n        ServerAdmin jordi@docu-iaw2425.org\n        ServerName docu-iaw2425.org\n        ServerAlias www.docu-iaw2425.org\n        DocumentRoot /var/www/www.docu-iaw2425.org/site\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> </p> <p>Guarda y cierra el archivo cuando hayas terminado.</p> <p>Ahora habilita el archivo con la herramienta a2ensite: <pre><code>$ sudo a2ensite www.iaw2425.org.conf\n$ sudo a2ensite www.docu-iaw2425.org.conf\n</code></pre> Deshabilita el sitio predeterminado definido en 000-default.conf: <pre><code>$ sudo a2dissite 000-default.conf\n</code></pre> A continuaci\u00f3n, prueba si hay errores de configuraci\u00f3n: <pre><code>$ sudo apache2ctl configtest\n</code></pre> Deber\u00edas recibir la siguiente salida . . . Syntax OK Reinicia Apache para implementar tus cambios: <pre><code>$ sudo systemctl restart apache2\n</code></pre></p>"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#modificar-ficher-hosts","title":"Modificar ficher hosts","text":"<p>Modifiquem el ficher /etc/hosts: <pre><code>$ sudo nano /etc/hosts\n</code></pre> </p>"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#pagina-wwwiaw2425org","title":"Pagina www.iaw2425.org","text":""},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#pagina-wwwdocu-iaw2425org","title":"Pagina www.docu-iaw2425.org","text":""},{"location":"Unidad_2/Practicas/Practica_2/","title":"Practica 2: Certificado SSL/TLS","text":"<p>Objetivos de la pr\u00e1ctica</p> <ul> <li>Crear un certificado SSL/TLS autofirmado con la herramienta openssl.</li> <li>Configurar el servidor web Apache para que utilice el certificado SSL/TLS autofirmado.</li> </ul>"},{"location":"Unidad_2/Practicas/Practica_2/#1-https-creacion-y-configuracion-de-un-certificado-ssltls-autofirmado-en-apache","title":"1.  HTTPS. Creaci\u00f3n y configuraci\u00f3n de un certificado SSL/TLS autofirmado en Apache","text":"<p>Nota</p> <p>El proceso de creaci\u00f3n de un certificado autofirmado consta de los siguientes pasos:</p> <ol> <li>Crear una clave privada y un certificado autofirmado.</li> <li>Configurar la clave privada y el certificado autofirmado en el servidor web.</li> </ol>"},{"location":"Unidad_2/Practicas/Practica_2/#11-instalacion-del-servidor-web-apache","title":"1.1 Instalaci\u00f3n del servidor web Apache","text":"<p>En primer lugar deberemos tener instado un servidor web Apache en nuestra m\u00e1quina.</p>"},{"location":"Unidad_2/Practicas/Practica_2/#12-creacion-del-certificado-autofirmado","title":"1.2 Creaci\u00f3n del certificado autofirmado","text":"<p>Para crear un certificado autofirmado vamos a utilizar la utilid openssl.</p> <p>Este es el comando que vamos a utilizar: <pre><code>$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt\n</code></pre> </p> <p>Este comando nos genera un certificado autofirmado con una clave privada y un certificado autofirmado.</p>"},{"location":"Unidad_2/Practicas/Practica_2/#13-como-automatizar-la-creacion-de-un-certificado-autofirmado","title":"1.3 C\u00f3mo automatizar la creaci\u00f3n de un certificado autofirmado","text":"<p>Para automatizar la creaci\u00f3n de un certificado autofirmado desde un script de Bash, podemos hacer uso del par\u00e1metro -subj que nos permite pasar los datos se adjuntan al certificado como argumentos desde la l\u00ednea de comandos.</p> <p>Ejemplo: <pre><code>#!/bin/bash\nset -x\n\n# Configuramos las variables con los datos que necesita el certificado\nOPENSSL_COUNTRY=\"ES\"\nOPENSSL_PROVINCE=\"Valencia\"\nOPENSSL_LOCALITY=\"Tavernes de la Valldigna\"\nOPENSSL_ORGANIZATION=\"IES Jaume II el Just\"\nOPENSSL_ORGUNIT=\"Departamento de Informatica\"\nOPENSSL_COMMON_NAME=\"iaw245.org\"\nOPENSSL_EMAIL=\"jorcormic@alu.edu.gva.es\"\n\n# Creamos el certificado autofirmado\n\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/C=$OPENSSL_COUNTRY/ST=$OPENSSL_PROVINCE/L=$OPENSSL_LOCALITY/O=$OPENSSL_ORGANIZATION/OU=$OPENSSL_ORGUNIT/CN=$OPENSSL_COMMON_NAME/emailAddress=$OPENSSL_EMAIL\"\n</code></pre></p>"},{"location":"Unidad_2/Practicas/Practica_2/#descarga-de-scripts-de-la-practica-2-unidad-2","title":"Descarga de Scripts de la Pr\u00e1ctica 2 - Unidad 2","text":"<p>Aqu\u00ed puedes descargar los scripts necesarios para la pr\u00e1ctica.</p> <p>Descargar install_lamp.sh</p>"},{"location":"Unidad_2/Practicas/Practica_2/#14-como-consultar-la-informacion-del-sujeto-del-certificado","title":"1.4 C\u00f3mo consultar la informaci\u00f3n del sujeto del certificado","text":"<p><pre><code>$ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -subject\n</code></pre> </p>"},{"location":"Unidad_2/Practicas/Practica_2/#15-como-consultar-la-fecha-de-caducidad-del-certificado","title":"1.5 C\u00f3mo consultar la fecha de caducidad del certificado","text":"<p><pre><code>$ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -dates\n</code></pre> </p>"},{"location":"Unidad_2/Practicas/Practica_2/#16-configuracion-de-un-virtualhost-con-ssltsl-en-el-servidor-web-apache","title":"1.6 Configuraci\u00f3n de un VirtualHost con SSL/TSL en el servidor web Apache.","text":"<p>Paso 1</p> <p>Editamos el archivo de configuraci\u00f3n del virtual host donde queremos habilitar el tr\u00e1fico HTTPS.</p> <p>En nuestro caso, utilizaremos el archivo de configuraci\u00f3n que tiene Apache por defecto para SSL/TLS, que est\u00e1 en la ruta:/etc/apache2/sites-available/default-ssl.conf.</p> <p>El contenido del archivo ser\u00e1 el siguiente: <pre><code>&lt;VirtualHost *:443&gt;\n        ServerName iaw2425.org\n        DocumentRoot /var/www/www.iaw2425.org/site\n        DirectoryIndex index.php index.html\n        SSLEngine on\n        SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\n        SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\n&lt;/VirtualHost&gt;\n</code></pre> </p> <p>Las directivas que hemos configurado son: - : Indica que este virtual host escuchar\u00e1 en el puerto 443 (HTTPS). - ServerName: Indica el nombre de dominio y se utiliza para indicar al servidor web Apache qu\u00e9 peticiones debe servir para este virtual host. En nuestro ejemplo estamos utilizando el dominio practicahttps.local. - DocumentRoot: Es la ruta donde se encuentra el directorio ra\u00edz del host virtual. - SSLEngine on: Configuramos que este virtual host utilizar\u00e1 SSL/TLS. - SSLCertificateFile: Indica la ruta donde se encuentra el certificado autofirmado. - SSLCertificateKeyFile: Indica la ruta donde se encuentra la clave privada del certificado autofirmado.</p> <p>Paso 2</p> <p>Habilitamos el virtual host que acabamos de configurar. <pre><code>$ sudo a2ensite default-ssl.conf\n</code></pre></p> <p>Paso 3</p> <p>Habilitamos el m\u00f3dulo SSL en Apache. <pre><code>$ sudo a2enmod ssl\n</code></pre></p> <p>Paso 4</p> <p>Configuramos el virtual host de HTTP para que redirija todo el tr\u00e1fico a HTTPS.</p> <p>En nuestro caso, el virtual host que maneja las peticiones HTTP est\u00e1 en el archivo de configuraci\u00f3n que utiliza</p> <p>Apache por defecto para el puerto 80 :/etc/apache2/sites-available/000-default.conf.</p> <p>El contenido del archivo ser\u00e1 el siguiente: <pre><code>&lt;VirtualHost *:80&gt;\n    #ServerName practica-https.local\nDocumentRoot/var/www/html\n    #Redirige alpuerto 443 (HTTPS)\nRewriteEngineOn\n    RewriteCond%{HTTPS} off\n    RewriteRule^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n&lt;/VirtualHost&gt;\n</code></pre> Paso 5</p> <p>Para que el servidor web Apache pueda hacer la redirecci\u00f3n de HTTP a HTTPS es necesario habilitar el m\u00f3dulo rewrite en Apache. <pre><code>$ sudo a2enmod rewrite  </code></pre></p> <p>Paso 6</p> <p>Reiniciamos el servicio de Apache.\u00e7 <pre><code>$ sudo systemctl restart apache2\n</code></pre></p> <p>Paso 7</p> <p>Una vez llegado a este punto, es necesario comprobar que el puerto 443 est\u00e1 abierto en las reglas del firewall para permitir el tr\u00e1fico HTTPS.</p> <p>Paso 8</p> <p>Accede desde un navegador web al nombre de dominio que acabas de configurar. En nuesro caso ser\u00e1: https://iaw245.org</p> <p></p>"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/","title":"Practica 2: Certificado SSL/TLS","text":"<p>Objetivos de la pr\u00e1ctica</p> <ul> <li>Crear un certificado SSL/TLS autofirmado con la herramienta openssl.</li> <li>Configurar el servidor web Apache para que utilice el certificado SSL/TLS autofirmado.</li> </ul>"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#1-https-creacion-y-configuracion-de-un-certificado-ssltls-autofirmado-en-apache","title":"1.  HTTPS. Creaci\u00f3n y configuraci\u00f3n de un certificado SSL/TLS autofirmado en Apache","text":"<p>Nota</p> <p>El proceso de creaci\u00f3n de un certificado autofirmado consta de los siguientes pasos:</p> <ol> <li>Crear una clave privada y un certificado autofirmado.</li> <li>Configurar la clave privada y el certificado autofirmado en el servidor web.</li> </ol>"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#11-instalacion-del-servidor-web-apache","title":"1.1 Instalaci\u00f3n del servidor web Apache","text":"<p>En primer lugar deberemos tener instado un servidor web Apache en nuestra m\u00e1quina.</p>"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#12-creacion-del-certificado-autofirmado","title":"1.2 Creaci\u00f3n del certificado autofirmado","text":"<p>Para crear un certificado autofirmado vamos a utilizar la utilid openssl.</p> <p>Este es el comando que vamos a utilizar: <pre><code>$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt\n</code></pre> </p> <p>Este comando nos genera un certificado autofirmado con una clave privada y un certificado autofirmado.</p>"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#13-como-automatizar-la-creacion-de-un-certificado-autofirmado","title":"1.3 C\u00f3mo automatizar la creaci\u00f3n de un certificado autofirmado","text":"<p>Para automatizar la creaci\u00f3n de un certificado autofirmado desde un script de Bash, podemos hacer uso del par\u00e1metro -subj que nos permite pasar los datos se adjuntan al certificado como argumentos desde la l\u00ednea de comandos.</p> <p>Ejemplo: <pre><code>#!/bin/bash\nset -x\n\n# Configuramos las variables con los datos que necesita el certificado\nOPENSSL_COUNTRY=\"ES\"\nOPENSSL_PROVINCE=\"Valencia\"\nOPENSSL_LOCALITY=\"Tavernes de la Valldigna\"\nOPENSSL_ORGANIZATION=\"IES Jaume II el Just\"\nOPENSSL_ORGUNIT=\"Departamento de Informatica\"\nOPENSSL_COMMON_NAME=\"iaw245.org\"\nOPENSSL_EMAIL=\"jorcormic@alu.edu.gva.es\"\n\n# Creamos el certificado autofirmado\n\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/C=$OPENSSL_COUNTRY/ST=$OPENSSL_PROVINCE/L=$OPENSSL_LOCALITY/O=$OPENSSL_ORGANIZATION/OU=$OPENSSL_ORGUNIT/CN=$OPENSSL_COMMON_NAME/emailAddress=$OPENSSL_EMAIL\"\n</code></pre></p>"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#descarga-de-scripts-de-la-practica-2-unidad-2","title":"Descarga de Scripts de la Pr\u00e1ctica 2 - Unidad 2","text":"<p>Aqu\u00ed puedes descargar los scripts necesarios para la pr\u00e1ctica.</p> <p>Descargar install_lamp.sh</p>"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#14-como-consultar-la-informacion-del-sujeto-del-certificado","title":"1.4 C\u00f3mo consultar la informaci\u00f3n del sujeto del certificado","text":"<p><pre><code>$ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -subject\n</code></pre> </p>"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#15-como-consultar-la-fecha-de-caducidad-del-certificado","title":"1.5 C\u00f3mo consultar la fecha de caducidad del certificado","text":"<p><pre><code>$ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -dates\n</code></pre> </p>"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#16-configuracion-de-un-virtualhost-con-ssltsl-en-el-servidor-web-apache","title":"1.6 Configuraci\u00f3n de un VirtualHost con SSL/TSL en el servidor web Apache.","text":"<p>Paso 1</p> <p>Editamos el archivo de configuraci\u00f3n del virtual host donde queremos habilitar el tr\u00e1fico HTTPS.</p> <p>En nuestro caso, utilizaremos el archivo de configuraci\u00f3n que tiene Apache por defecto para SSL/TLS, que est\u00e1 en la ruta:/etc/apache2/sites-available/default-ssl.conf.</p> <p>El contenido del archivo ser\u00e1 el siguiente: <pre><code>&lt;VirtualHost *:443&gt;\n        ServerName iaw2425.org\n        DocumentRoot /var/www/www.iaw2425.org/site\n        DirectoryIndex index.php index.html\n        SSLEngine on\n        SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\n        SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\n&lt;/VirtualHost&gt;\n</code></pre> </p> <p>Las directivas que hemos configurado son: - : Indica que este virtual host escuchar\u00e1 en el puerto 443 (HTTPS). - ServerName: Indica el nombre de dominio y se utiliza para indicar al servidor web Apache qu\u00e9 peticiones debe servir para este virtual host. En nuestro ejemplo estamos utilizando el dominio practicahttps.local. - DocumentRoot: Es la ruta donde se encuentra el directorio ra\u00edz del host virtual. - SSLEngine on: Configuramos que este virtual host utilizar\u00e1 SSL/TLS. - SSLCertificateFile: Indica la ruta donde se encuentra el certificado autofirmado. - SSLCertificateKeyFile: Indica la ruta donde se encuentra la clave privada del certificado autofirmado.</p> <p>Paso 2</p> <p>Habilitamos el virtual host que acabamos de configurar. <pre><code>$ sudo a2ensite default-ssl.conf\n</code></pre></p> <p>Paso 3</p> <p>Habilitamos el m\u00f3dulo SSL en Apache. <pre><code>$ sudo a2enmod ssl\n</code></pre></p> <p>Paso 4</p> <p>Configuramos el virtual host de HTTP para que redirija todo el tr\u00e1fico a HTTPS.</p> <p>En nuestro caso, el virtual host que maneja las peticiones HTTP est\u00e1 en el archivo de configuraci\u00f3n que utiliza</p> <p>Apache por defecto para el puerto 80 :/etc/apache2/sites-available/000-default.conf.</p> <p>El contenido del archivo ser\u00e1 el siguiente: <pre><code>&lt;VirtualHost *:80&gt;\n    #ServerName practica-https.local\nDocumentRoot/var/www/html\n    #Redirige alpuerto 443 (HTTPS)\nRewriteEngineOn\n    RewriteCond%{HTTPS} off\n    RewriteRule^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n&lt;/VirtualHost&gt;\n</code></pre> Paso 5</p> <p>Para que el servidor web Apache pueda hacer la redirecci\u00f3n de HTTP a HTTPS es necesario habilitar el m\u00f3dulo rewrite en Apache. <pre><code>$ sudo a2enmod rewrite  </code></pre></p> <p>Paso 6</p> <p>Reiniciamos el servicio de Apache.\u00e7 <pre><code>$ sudo systemctl restart apache2\n</code></pre></p> <p>Paso 7</p> <p>Una vez llegado a este punto, es necesario comprobar que el puerto 443 est\u00e1 abierto en las reglas del firewall para permitir el tr\u00e1fico HTTPS.</p> <p>Paso 8</p> <p>Accede desde un navegador web al nombre de dominio que acabas de configurar. En nuesro caso ser\u00e1: https://iaw245.org</p> <p></p>"}]}