{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Modul Implantacio de Aplicacions Web IES Jaume II El Just Curso 2024/2025 Alumno:- Jordi Corbi Mico - jorcormic@alu.edu.gva.es Contenidos Contenidos del Modul Unidad 1: Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web. Ver Introducci\u00f3n Git y Github Markdown y MkDocs. Unidad 2: Implantaci\u00f3n de aplicaciones web PHP Implantaci\u00f3n web en un servidor LAMP Arquitectura de un nivel Arquitectura de dos niveles Protocolo HTTP/HTTPS Implantaci\u00f3n web en un servidor LEMP Balanceadores de carga con NGINX Instancias ECS en AWS Unidad 3: Docker para la implantaci\u00f3n WEB Aplicaciones web con Docker Despliegue de aplicaciones web en arquitectura de dos niveles con Docker y Docker Compose Unidad 4: Fundamentos de programaci\u00f3n en PHP El lenguaje de programaci\u00f3n PHP Sint\u00e1xis, variables, estructuras y funciones Acceso y manipulaci\u00f3n de bases de datos con PHP Unidad 5: Instalaci\u00f3n y modificaci\u00f3n de gestores de contenidos Instalar y configurar un CMS Modificar la apariencia de un CMS Creaci\u00f3n de Plugins personalizados para un CMS.","title":"Implantaci\u00f3n de Aplicaciones Web"},{"location":"#modul-implantacio-de-aplicacions-web","text":"","title":"Modul Implantacio de Aplicacions Web"},{"location":"#ies-jaume-ii-el-just","text":"","title":"IES Jaume II El Just"},{"location":"#curso-20242025","text":"Alumno:- Jordi Corbi Mico - jorcormic@alu.edu.gva.es","title":"Curso 2024/2025"},{"location":"#contenidos","text":"Contenidos del Modul Unidad 1: Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web. Ver Introducci\u00f3n Git y Github Markdown y MkDocs. Unidad 2: Implantaci\u00f3n de aplicaciones web PHP Implantaci\u00f3n web en un servidor LAMP Arquitectura de un nivel Arquitectura de dos niveles Protocolo HTTP/HTTPS Implantaci\u00f3n web en un servidor LEMP Balanceadores de carga con NGINX Instancias ECS en AWS Unidad 3: Docker para la implantaci\u00f3n WEB Aplicaciones web con Docker Despliegue de aplicaciones web en arquitectura de dos niveles con Docker y Docker Compose Unidad 4: Fundamentos de programaci\u00f3n en PHP El lenguaje de programaci\u00f3n PHP Sint\u00e1xis, variables, estructuras y funciones Acceso y manipulaci\u00f3n de bases de datos con PHP Unidad 5: Instalaci\u00f3n y modificaci\u00f3n de gestores de contenidos Instalar y configurar un CMS Modificar la apariencia de un CMS Creaci\u00f3n de Plugins personalizados para un CMS.","title":"Contenidos"},{"location":"Unidad_1/Practicas/Unidad_1/","text":"Unidad 1 Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web","title":"Unidad 1 Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web"},{"location":"Unidad_1/Practicas/Unidad_1/#unidad-1-introduccion-a-la-implantacion-de-aplicaciones-web","text":"","title":"Unidad 1 Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web"},{"location":"Unidad_1/Practicas/Practica_1/Practica_1/","text":"Pr\u00e1ctica 1: Git. Trabajando con ramas y uniones Objectius En esta pr\u00e0ctica desplegarem una p\u00e0gina web est\u00e0tica amb MkDocs en GitHub *Pages. Com esta que est\u00e0s veient. Per a aix\u00f2, haur\u00e0s de seguir els seg\u00fcents passos: Aprendr\u00e0s el concepte de branca. La gesti\u00f3 i el cicle de vida (creaci\u00f3, modificaci\u00f3, esborrament, \u2026) de branques. Aprendr\u00e0s el concepte d'uni\u00f3 (*merge) que ens possibilita la fusi\u00f3 de branques. A solucionar els possibles conflictes que poden apar\u00e9ixer en el moment del *merge. Entrega Crea una rama que se llame primera en tu local, y ejecuta la instrucci\u00f3n necesaria para comprobar que se ha creado. Creacion de la rama: $ git checkout -b [nombre de la rama] Comprobacion de la rama: $ git branch Crea un nuevo fichero en esta rama y fusi\u00f3nalo con la principal. \u00bfSe ha producido conflicto? Razona la respuesta Cambiar de rama: $ git checkout primera Creacion del fichero: $ nano fichero No se ha producido ningun conflicto. Ja que el fichero que estamos a\u00f1adiendo a la rama main no estaba creado. Borra la rama primera. Borrar rama primera: $ git branch -d primera Crea una rama que se llame segunda, y modifica un fichero en ella para producir un conflicto al unirlo a la rama principal. Entrega el contenido del fichero donde se ha producido el conflicto. Creacion de la rama: $ git checkout -b segunda Cambiar de rama: $ git checkout segunda Modificar fichero: $ nano fichero Fusionar ramas: $ git merge segunda Comprovar el conficto: $ git diff Soluciona el conflicto que has creado en el punto anterior y sincroniza la rama segunda en el remoto. Solucionar el conflicto: Para solucionar el conflicto hacemos un $ git diff y saldra donde esta dando el error veremos que el error esta en el fichero que modificamos anteriormente solo tenemos que volver a editar-lo i tendremos solucionado el fallo.","title":"Pr\u00e1ctica 1: Git. Trabajando con ramas y uniones"},{"location":"Unidad_1/Practicas/Practica_1/Practica_1/#practica-1-git-trabajando-con-ramas-y-uniones","text":"Objectius En esta pr\u00e0ctica desplegarem una p\u00e0gina web est\u00e0tica amb MkDocs en GitHub *Pages. Com esta que est\u00e0s veient. Per a aix\u00f2, haur\u00e0s de seguir els seg\u00fcents passos: Aprendr\u00e0s el concepte de branca. La gesti\u00f3 i el cicle de vida (creaci\u00f3, modificaci\u00f3, esborrament, \u2026) de branques. Aprendr\u00e0s el concepte d'uni\u00f3 (*merge) que ens possibilita la fusi\u00f3 de branques. A solucionar els possibles conflictes que poden apar\u00e9ixer en el moment del *merge.","title":"Pr\u00e1ctica 1: Git. Trabajando con ramas y uniones"},{"location":"Unidad_1/Practicas/Practica_1/Practica_1/#entrega","text":"Crea una rama que se llame primera en tu local, y ejecuta la instrucci\u00f3n necesaria para comprobar que se ha creado. Creacion de la rama: $ git checkout -b [nombre de la rama] Comprobacion de la rama: $ git branch Crea un nuevo fichero en esta rama y fusi\u00f3nalo con la principal. \u00bfSe ha producido conflicto? Razona la respuesta Cambiar de rama: $ git checkout primera Creacion del fichero: $ nano fichero No se ha producido ningun conflicto. Ja que el fichero que estamos a\u00f1adiendo a la rama main no estaba creado. Borra la rama primera. Borrar rama primera: $ git branch -d primera Crea una rama que se llame segunda, y modifica un fichero en ella para producir un conflicto al unirlo a la rama principal. Entrega el contenido del fichero donde se ha producido el conflicto. Creacion de la rama: $ git checkout -b segunda Cambiar de rama: $ git checkout segunda Modificar fichero: $ nano fichero Fusionar ramas: $ git merge segunda Comprovar el conficto: $ git diff Soluciona el conflicto que has creado en el punto anterior y sincroniza la rama segunda en el remoto. Solucionar el conflicto: Para solucionar el conflicto hacemos un $ git diff y saldra donde esta dando el error veremos que el error esta en el fichero que modificamos anteriormente solo tenemos que volver a editar-lo i tendremos solucionado el fallo.","title":"Entrega"},{"location":"Unidad_1/Practicas/Practica_2/Practica_2/","text":"Pr\u00e1ctica 2: Pull Request. \u00bfC\u00f3mo colaborar en un proyecto de software libre? Objectius En esta pr\u00e1ctica vamos a desplegar una p\u00e1gina web est\u00e1tica con MkDocs en GitHub Pages. Como esta que est\u00e1s viendo. Para ello, deber\u00e1s seguir los siguientes pasos: Conocer el concepto de Pull Request. Conocer la metodolog\u00eda para colaborar en proyectos alojados en GitHub realizando Pull Requests. Entregar Documentaci\u00f3n de los pasos fundamentales (con instrucciones) para realizar el pull request. Lo primero es hacer un fork del repositorio al que quieres contribuir. Nos creara un nuevo repositorio en la cuenta de el usuario. Una vez que hemos copiado el repositorio a nuestra cuenta, podemos clonar ese repositorio. Para realizar la clonaci\u00f3n ejecutamos: git clone git@github.com:jcorbii/practica-pr-asix.git A continuaci\u00f3n vamos a crear una nueva rama, donde realizaremos los cambios que posteriormente propondremos como cambios. Para crear la rama ejecutamos: git checkout -b cambios","title":"Pr\u00e1ctica 2: \u00bfC\u00f3mo colaborar en un proyecto de software libre? \u00bfQu\u00e9 es un Pull Request (PR)?"},{"location":"Unidad_1/Practicas/Practica_2/Practica_2/#practica-2-pull-request-como-colaborar-en-un-proyecto-de-software-libre","text":"Objectius En esta pr\u00e1ctica vamos a desplegar una p\u00e1gina web est\u00e1tica con MkDocs en GitHub Pages. Como esta que est\u00e1s viendo. Para ello, deber\u00e1s seguir los siguientes pasos: Conocer el concepto de Pull Request. Conocer la metodolog\u00eda para colaborar en proyectos alojados en GitHub realizando Pull Requests.","title":"Pr\u00e1ctica 2: Pull Request. \u00bfC\u00f3mo colaborar en un proyecto de software libre?"},{"location":"Unidad_1/Practicas/Practica_2/Practica_2/#entregar","text":"Documentaci\u00f3n de los pasos fundamentales (con instrucciones) para realizar el pull request. Lo primero es hacer un fork del repositorio al que quieres contribuir. Nos creara un nuevo repositorio en la cuenta de el usuario. Una vez que hemos copiado el repositorio a nuestra cuenta, podemos clonar ese repositorio. Para realizar la clonaci\u00f3n ejecutamos: git clone git@github.com:jcorbii/practica-pr-asix.git A continuaci\u00f3n vamos a crear una nueva rama, donde realizaremos los cambios que posteriormente propondremos como cambios. Para crear la rama ejecutamos: git checkout -b cambios","title":"Entregar"},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/","text":"practica-pr-asix","title":"practica-pr-asix"},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/#practica-pr-asix","text":"","title":"practica-pr-asix"},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/files/jcm/","text":"\u00bfQue assignatura te gusta m\u00e1s? \u00bfporque? La assignatura que me gusta mas es la de Seguridad i Alta Disponibilidad. Es una assignatura que me encanta Quiero especializarme en temas de seguridad No me cuesta nada esta assignatura","title":"\u00bfQue assignatura te gusta m\u00e1s? \u00bfporque?"},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/files/jcm/#que-assignatura-te-gusta-mas-porque","text":"","title":"\u00bfQue assignatura te gusta m\u00e1s? \u00bfporque?"},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/files/jcm/#la-assignatura-que-me-gusta-mas-es-la-de-seguridad-i-alta-disponibilidad","text":"Es una assignatura que me encanta Quiero especializarme en temas de seguridad No me cuesta nada esta assignatura","title":"La assignatura que me gusta mas es la de Seguridad i Alta Disponibilidad."},{"location":"Unidad_1/Practicas/Practica_2/practica-pr-asix/files/smm/","text":"Samuel Mascarell","title":"Smm"},{"location":"Unidad_1/Practicas/Practica_3/Practica_3/","text":"Pr\u00e1ctica 3 - Despliegue de una p\u00e1gina web est\u00e1tica con Mkdocs y GitHub Pages Objectivos En esta pr\u00e1ctica vamos a desplegar una p\u00e1gina web est\u00e1tica con MkDocs en GitHub Pages. Como esta que est\u00e1s viendo. Para ello, deber\u00e1s seguir los siguientes pasos: Aprender a utilizar MarkDown Aprender a utilizar MkDocs Aprender a utilizar GitHub Pages Desplegar una p\u00e1gina web est\u00e1tica Entrega Crea un nuevo proyecto de MkDocs en tu ordenador. Primero, aseg\u00farate de tener MkDocs instalado en tu ordenador. Si no lo tienes, puedes instalarlo con pip: $ pip install mkdocs Luego, crea un nuevo proyecto de MkDocs usando el siguiente comando: mkdocs new web cd web Esto crear\u00e1 una carpeta con el nombre del proyecto y generar\u00e1 una estructura b\u00e1sica con el archivo mkdocs.yml (para la configuraci\u00f3n) y una carpeta docs que contendr\u00e1 los archivos Markdown para la documentaci\u00f3n. Escribe la documentaci\u00f3n de tu proyecto en formato Markdown. La documentacion de el projecto esta ja echa en la practica 1 y la practica 2 Genera la p\u00e1gina web con MkDocs mkdocs new nombre-del-proyecto Esto crear\u00e1 una estructura b\u00e1sica de directorios. Estructura del proyecto MkDocs Dentro del directorio de tu proyecto, ver\u00e1s un archivo mkdocs.yml y una carpeta docs , donde deber\u00e1s colocar tus archivos .md. A\u00f1adir documentaci\u00f3n Copia tu documentaci\u00f3n Markdown a la carpeta docs . Aseg\u00farate de que los nombres de los archivos sean claros y representativos. Configurar mkdocs.yml Aseg\u00farate de que tu archivo mkdocs.yml tenga la configuraci\u00f3n correcta. Aqu\u00ed hay un ejemplo b\u00e1sico: Crea un repositorio en GitHub para tu proyecto. Repositorio para mi proyecto. Sube la p\u00e1gina web a GitHub Pages. Para subir la pagina web a GitHub Pages ahi que hacer: mkdocs gh-deploy Al hacer el gh-deploy aparecera en nuestro GitHub una rama que se llamara gh-pages . Luego tendremos que ir a settings y dentro de al apartadado de pages.Y ya solo tenemos que probar si funciona la URL. Comprueba que la URL de tu p\u00e1gina web en GitHub Pages funciona correctamente. URL GitHub","title":"Pr\u00e1ctica 3: - Despliegue de una p\u00e1gina web est\u00e1tica con Mkdocs y GitHub Pages"},{"location":"Unidad_1/Practicas/Practica_3/Practica_3/#practica-3-despliegue-de-una-pagina-web-estatica-con-mkdocs-y-github-pages","text":"Objectivos En esta pr\u00e1ctica vamos a desplegar una p\u00e1gina web est\u00e1tica con MkDocs en GitHub Pages. Como esta que est\u00e1s viendo. Para ello, deber\u00e1s seguir los siguientes pasos: Aprender a utilizar MarkDown Aprender a utilizar MkDocs Aprender a utilizar GitHub Pages Desplegar una p\u00e1gina web est\u00e1tica","title":"Pr\u00e1ctica 3 - Despliegue de una p\u00e1gina web est\u00e1tica con Mkdocs y GitHub Pages"},{"location":"Unidad_1/Practicas/Practica_3/Practica_3/#entrega","text":"Crea un nuevo proyecto de MkDocs en tu ordenador. Primero, aseg\u00farate de tener MkDocs instalado en tu ordenador. Si no lo tienes, puedes instalarlo con pip: $ pip install mkdocs Luego, crea un nuevo proyecto de MkDocs usando el siguiente comando: mkdocs new web cd web Esto crear\u00e1 una carpeta con el nombre del proyecto y generar\u00e1 una estructura b\u00e1sica con el archivo mkdocs.yml (para la configuraci\u00f3n) y una carpeta docs que contendr\u00e1 los archivos Markdown para la documentaci\u00f3n. Escribe la documentaci\u00f3n de tu proyecto en formato Markdown. La documentacion de el projecto esta ja echa en la practica 1 y la practica 2 Genera la p\u00e1gina web con MkDocs mkdocs new nombre-del-proyecto Esto crear\u00e1 una estructura b\u00e1sica de directorios. Estructura del proyecto MkDocs Dentro del directorio de tu proyecto, ver\u00e1s un archivo mkdocs.yml y una carpeta docs , donde deber\u00e1s colocar tus archivos .md. A\u00f1adir documentaci\u00f3n Copia tu documentaci\u00f3n Markdown a la carpeta docs . Aseg\u00farate de que los nombres de los archivos sean claros y representativos. Configurar mkdocs.yml Aseg\u00farate de que tu archivo mkdocs.yml tenga la configuraci\u00f3n correcta. Aqu\u00ed hay un ejemplo b\u00e1sico: Crea un repositorio en GitHub para tu proyecto. Repositorio para mi proyecto. Sube la p\u00e1gina web a GitHub Pages. Para subir la pagina web a GitHub Pages ahi que hacer: mkdocs gh-deploy Al hacer el gh-deploy aparecera en nuestro GitHub una rama que se llamara gh-pages . Luego tendremos que ir a settings y dentro de al apartadado de pages.Y ya solo tenemos que probar si funciona la URL. Comprueba que la URL de tu p\u00e1gina web en GitHub Pages funciona correctamente. URL GitHub","title":"Entrega"},{"location":"Unidad_2/Unidad_2/","text":"Unidad 2 Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web","title":"Unidad 2 Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web"},{"location":"Unidad_2/Unidad_2/#unidad-2-introduccion-a-la-implantacion-de-aplicaciones-web","text":"","title":"Unidad 2 Introducci\u00f3n a la implantaci\u00f3n de aplicaciones web"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/","text":"Practica 1:Implantaci\u00f3n de una web est\u00e1tica con Apache Objetivos de la pr\u00e1ctica Instalar y configurar un servidor web Apache2. Crear distintos Host Virtuales en apache2 que nos permiten tener sitios web diferenciados. Acceder a cada Host Virtual con un determinado nombre de dominio. 1. Configuracio de Host virtuals en Apache2 Crea el directorio para www.iaw2425.org de la siguiente manera: $ sudo mkdir -p /var/www/www.iaw2425.org $ sudo mkdir -p /var/www/www.docu-iaw2425.org A continuaci\u00f3n, asigna la propiedad del directorio al usuario con el que has iniciado sesi\u00f3n actualmente con la variable de entorno $USER: $ sudo chown -R $USER : $USER /var/www/www.iaw2425.org $ sudo chown -R $USER : $USER /var/www/www.docu-iaw2425.org 1.1 Configuracion pagina www.iaw2425.org Para la parte de la Web vamos a copiar el site de nuestra pagina web en Mkdocs . Ya que asi podremos ver algo quando intentemos acceder. Para que Apache sirva este contenido, es necesario crear un archivo de host virtual con las directivas correctas. En lugar de modificar el archivo de configuraci\u00f3n predeterminado ubicado en /etc/apache2/sites-available/000-default.conf directamente, crea uno nuevo en /etc/apache2/sites-available/www.iaw2425.org.conf : $ sudo nano /etc/apache2/sites-available/www.iaw2425.org.conf <VirtualHost *:8080> ServerAdmin jordi@iaw2425.org ServerName iaw2425.org ServerAlias www.iaw2425.org DocumentRoot /var/www/www.iaw2425.org/site ErrorLog ${ APACHE_LOG_DIR } /error.log CustomLog ${ APACHE_LOG_DIR } /access.log combined </VirtualHost> 1.2 Configuracion pagina www.docu-iaw2425.org Para la parte de la Web vamos a copiar el site de nuestra pagina web en Mkdocs . Ya que asi podremos ver algo quando intentemos acceder. Para que Apache sirva este contenido, es necesario crear un archivo de host virtual con las directivas correctas. En lugar de modificar el archivo de configuraci\u00f3n predeterminado ubicado en /etc/apache2/sites-available/000-default.conf directamente, crea uno nuevo en /etc/apache2/sites-available/www.docu-iaw2425.org.conf : $ sudo nano /etc/apache2/sites-available/www.docu-iaw2425.org.conf <VirtualHost *:8081> ServerAdmin jordi@docu-iaw2425.org ServerName docu-iaw2425.org ServerAlias www.docu-iaw2425.org DocumentRoot /var/www/www.docu-iaw2425.org/site ErrorLog ${ APACHE_LOG_DIR } /error.log CustomLog ${ APACHE_LOG_DIR } /access.log combined </VirtualHost> Guarda y cierra el archivo cuando hayas terminado. Ahora habilita el archivo con la herramienta a2ensite: $ sudo a2ensite www.iaw2425.org.conf $ sudo a2ensite www.docu-iaw2425.org.conf Deshabilita el sitio predeterminado definido en 000-default.conf: $ sudo a2dissite 000 -default.conf A continuaci\u00f3n, prueba si hay errores de configuraci\u00f3n: $ sudo apache2ctl configtest Deber\u00edas recibir la siguiente salida . . . Syntax OK Reinicia Apache para implementar tus cambios: $ sudo systemctl restart apache2 Modificar ficher hosts Modifiquem el ficher /etc/hosts: $ sudo nano /etc/hosts Pagina www.iaw2425.org Pagina www.docu-iaw2425.org","title":"Pr\u00e1ctica 1: Implantaci\u00f3n de una web est\u00e1tica con Apache"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#practica-1implantacion-de-una-web-estatica-con-apache","text":"Objetivos de la pr\u00e1ctica Instalar y configurar un servidor web Apache2. Crear distintos Host Virtuales en apache2 que nos permiten tener sitios web diferenciados. Acceder a cada Host Virtual con un determinado nombre de dominio.","title":"Practica 1:Implantaci\u00f3n de una web est\u00e1tica con Apache"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#1-configuracio-de-host-virtuals-en-apache2","text":"Crea el directorio para www.iaw2425.org de la siguiente manera: $ sudo mkdir -p /var/www/www.iaw2425.org $ sudo mkdir -p /var/www/www.docu-iaw2425.org A continuaci\u00f3n, asigna la propiedad del directorio al usuario con el que has iniciado sesi\u00f3n actualmente con la variable de entorno $USER: $ sudo chown -R $USER : $USER /var/www/www.iaw2425.org $ sudo chown -R $USER : $USER /var/www/www.docu-iaw2425.org","title":"1. Configuracio de Host virtuals en Apache2"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#11-configuracion-pagina-wwwiaw2425org","text":"Para la parte de la Web vamos a copiar el site de nuestra pagina web en Mkdocs . Ya que asi podremos ver algo quando intentemos acceder. Para que Apache sirva este contenido, es necesario crear un archivo de host virtual con las directivas correctas. En lugar de modificar el archivo de configuraci\u00f3n predeterminado ubicado en /etc/apache2/sites-available/000-default.conf directamente, crea uno nuevo en /etc/apache2/sites-available/www.iaw2425.org.conf : $ sudo nano /etc/apache2/sites-available/www.iaw2425.org.conf <VirtualHost *:8080> ServerAdmin jordi@iaw2425.org ServerName iaw2425.org ServerAlias www.iaw2425.org DocumentRoot /var/www/www.iaw2425.org/site ErrorLog ${ APACHE_LOG_DIR } /error.log CustomLog ${ APACHE_LOG_DIR } /access.log combined </VirtualHost>","title":"1.1 Configuracion  pagina www.iaw2425.org"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#12-configuracion-pagina-wwwdocu-iaw2425org","text":"Para la parte de la Web vamos a copiar el site de nuestra pagina web en Mkdocs . Ya que asi podremos ver algo quando intentemos acceder. Para que Apache sirva este contenido, es necesario crear un archivo de host virtual con las directivas correctas. En lugar de modificar el archivo de configuraci\u00f3n predeterminado ubicado en /etc/apache2/sites-available/000-default.conf directamente, crea uno nuevo en /etc/apache2/sites-available/www.docu-iaw2425.org.conf : $ sudo nano /etc/apache2/sites-available/www.docu-iaw2425.org.conf <VirtualHost *:8081> ServerAdmin jordi@docu-iaw2425.org ServerName docu-iaw2425.org ServerAlias www.docu-iaw2425.org DocumentRoot /var/www/www.docu-iaw2425.org/site ErrorLog ${ APACHE_LOG_DIR } /error.log CustomLog ${ APACHE_LOG_DIR } /access.log combined </VirtualHost> Guarda y cierra el archivo cuando hayas terminado. Ahora habilita el archivo con la herramienta a2ensite: $ sudo a2ensite www.iaw2425.org.conf $ sudo a2ensite www.docu-iaw2425.org.conf Deshabilita el sitio predeterminado definido en 000-default.conf: $ sudo a2dissite 000 -default.conf A continuaci\u00f3n, prueba si hay errores de configuraci\u00f3n: $ sudo apache2ctl configtest Deber\u00edas recibir la siguiente salida . . . Syntax OK Reinicia Apache para implementar tus cambios: $ sudo systemctl restart apache2","title":"1.2 Configuracion  pagina www.docu-iaw2425.org"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#modificar-ficher-hosts","text":"Modifiquem el ficher /etc/hosts: $ sudo nano /etc/hosts","title":"Modificar ficher hosts"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#pagina-wwwiaw2425org","text":"","title":"Pagina www.iaw2425.org"},{"location":"Unidad_2/Practicas/Practica_1/Practica_1/#pagina-wwwdocu-iaw2425org","text":"","title":"Pagina www.docu-iaw2425.org"},{"location":"Unidad_2/Practicas/Practica_2/","text":"Practica 2: Certificado SSL/TLS Objetivos de la pr\u00e1ctica Crear un certificado SSL/TLS autofirmado con la herramienta openssl. Configurar el servidor web Apache para que utilice el certificado SSL/TLS autofirmado. 1. HTTPS. Creaci\u00f3n y configuraci\u00f3n de un certificado SSL/TLS autofirmado en Apache Nota El proceso de creaci\u00f3n de un certificado autofirmado consta de los siguientes pasos: Crear una clave privada y un certificado autofirmado. Configurar la clave privada y el certificado autofirmado en el servidor web. 1.1 Instalaci\u00f3n del servidor web Apache En primer lugar deberemos tener instado un servidor web Apache en nuestra m\u00e1quina. 1.2 Creaci\u00f3n del certificado autofirmado Para crear un certificado autofirmado vamos a utilizar la utilid openssl. Este es el comando que vamos a utilizar: $ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt Este comando nos genera un certificado autofirmado con una clave privada y un certificado autofirmado. 1.3 C\u00f3mo automatizar la creaci\u00f3n de un certificado autofirmado Para automatizar la creaci\u00f3n de un certificado autofirmado desde un script de Bash, podemos hacer uso del par\u00e1metro -subj que nos permite pasar los datos se adjuntan al certificado como argumentos desde la l\u00ednea de comandos. Ejemplo: #!/bin/bash set -x # Configuramos las variables con los datos que necesita el certificado OPENSSL_COUNTRY = \"ES\" OPENSSL_PROVINCE = \"Valencia\" OPENSSL_LOCALITY = \"Tavernes de la Valldigna\" OPENSSL_ORGANIZATION = \"IES Jaume II el Just\" OPENSSL_ORGUNIT = \"Departamento de Informatica\" OPENSSL_COMMON_NAME = \"iaw245.org\" OPENSSL_EMAIL = \"jorcormic@alu.edu.gva.es\" # Creamos el certificado autofirmado sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/C= $OPENSSL_COUNTRY /ST= $OPENSSL_PROVINCE /L= $OPENSSL_LOCALITY /O= $OPENSSL_ORGANIZATION /OU= $OPENSSL_ORGUNIT /CN= $OPENSSL_COMMON_NAME /emailAddress= $OPENSSL_EMAIL \" Descarga de Scripts de la Pr\u00e1ctica 2 - Unidad 2 Aqu\u00ed puedes descargar los scripts necesarios para la pr\u00e1ctica. Descargar install_lamp.sh Descargar setup_selfsigned_certificate.sh 1.4 C\u00f3mo consultar la informaci\u00f3n del sujeto del certificado $ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -subject 1.5 C\u00f3mo consultar la fecha de caducidad del certificado $ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -dates 1.6 Configuraci\u00f3n de un VirtualHost con SSL/TSL en el servidor web Apache. Paso 1 Editamos el archivo de configuraci\u00f3n del virtual host donde queremos habilitar el tr\u00e1fico HTTPS. En nuestro caso, utilizaremos el archivo de configuraci\u00f3n que tiene Apache por defecto para SSL/TLS, que est\u00e1 en la ruta: /etc/apache2/sites-available/default-ssl.conf. El contenido del archivo ser\u00e1 el siguiente: <VirtualHost *:443> ServerName iaw2425.org DocumentRoot /var/www/www.iaw2425.org/site DirectoryIndex index.php index.html SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost> Las directivas que hemos configurado son: - : Indica que este virtual host escuchar\u00e1 en el puerto 443 (HTTPS). - ServerName : Indica el nombre de dominio y se utiliza para indicar al servidor web Apache qu\u00e9 peticiones debe servir para este virtual host. En nuestro ejemplo estamos utilizando el dominio practicahttps.local. - DocumentRoot : Es la ruta donde se encuentra el directorio ra\u00edz del host virtual. - SSLEngine on : Configuramos que este virtual host utilizar\u00e1 SSL/TLS. - SSLCertificateFile : Indica la ruta donde se encuentra el certificado autofirmado. - SSLCertificateKeyFile : Indica la ruta donde se encuentra la clave privada del certificado autofirmado. Paso 2 Habilitamos el virtual host que acabamos de configurar. $ sudo a2ensite default-ssl.conf Paso 3 Habilitamos el m\u00f3dulo SSL en Apache. $ sudo a2enmod ssl Paso 4 Configuramos el virtual host de HTTP para que redirija todo el tr\u00e1fico a HTTPS. En nuestro caso, el virtual host que maneja las peticiones HTTP est\u00e1 en el archivo de configuraci\u00f3n que utiliza Apache por defecto para el puerto 80 :/etc/apache2/sites-available/000- default .conf. El contenido del archivo ser\u00e1 el siguiente: <VirtualHost *:80> #ServerName practica-https.local DocumentRoot/var/www/html #Redirige alpuerto 443 (HTTPS) RewriteEngineOn RewriteCond% { HTTPS } off RewriteRule^ https://% { HTTP_HOST } % { REQUEST_URI } [ L,R = 301 ] </VirtualHost> Paso 5 Para que el servidor web Apache pueda hacer la redirecci\u00f3n de HTTP a HTTPS es necesario habilitar el m\u00f3dulo rewrite en Apache. $ sudo a2enmod rewrite Paso 6 Reiniciamos el servicio de Apache.\u00e7 $ sudo systemctl restart apache2 Paso 7 Una vez llegado a este punto, es necesario comprobar que el puerto 443 est\u00e1 abierto en las reglas del firewall para permitir el tr\u00e1fico HTTPS. Paso 8 Accede desde un navegador web al nombre de dominio que acabas de configurar. En nuesro caso ser\u00e1: https://iaw245.org","title":"Practica 2: Certificado SSL/TLS"},{"location":"Unidad_2/Practicas/Practica_2/#practica-2-certificado-ssltls","text":"Objetivos de la pr\u00e1ctica Crear un certificado SSL/TLS autofirmado con la herramienta openssl. Configurar el servidor web Apache para que utilice el certificado SSL/TLS autofirmado.","title":"Practica 2: Certificado SSL/TLS"},{"location":"Unidad_2/Practicas/Practica_2/#1-https-creacion-y-configuracion-de-un-certificado-ssltls-autofirmado-en-apache","text":"Nota El proceso de creaci\u00f3n de un certificado autofirmado consta de los siguientes pasos: Crear una clave privada y un certificado autofirmado. Configurar la clave privada y el certificado autofirmado en el servidor web.","title":"1.  HTTPS. Creaci\u00f3n y configuraci\u00f3n de un certificado SSL/TLS autofirmado en Apache"},{"location":"Unidad_2/Practicas/Practica_2/#11-instalacion-del-servidor-web-apache","text":"En primer lugar deberemos tener instado un servidor web Apache en nuestra m\u00e1quina.","title":"1.1 Instalaci\u00f3n del servidor web Apache"},{"location":"Unidad_2/Practicas/Practica_2/#12-creacion-del-certificado-autofirmado","text":"Para crear un certificado autofirmado vamos a utilizar la utilid openssl. Este es el comando que vamos a utilizar: $ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt Este comando nos genera un certificado autofirmado con una clave privada y un certificado autofirmado.","title":"1.2 Creaci\u00f3n del certificado autofirmado"},{"location":"Unidad_2/Practicas/Practica_2/#13-como-automatizar-la-creacion-de-un-certificado-autofirmado","text":"Para automatizar la creaci\u00f3n de un certificado autofirmado desde un script de Bash, podemos hacer uso del par\u00e1metro -subj que nos permite pasar los datos se adjuntan al certificado como argumentos desde la l\u00ednea de comandos. Ejemplo: #!/bin/bash set -x # Configuramos las variables con los datos que necesita el certificado OPENSSL_COUNTRY = \"ES\" OPENSSL_PROVINCE = \"Valencia\" OPENSSL_LOCALITY = \"Tavernes de la Valldigna\" OPENSSL_ORGANIZATION = \"IES Jaume II el Just\" OPENSSL_ORGUNIT = \"Departamento de Informatica\" OPENSSL_COMMON_NAME = \"iaw245.org\" OPENSSL_EMAIL = \"jorcormic@alu.edu.gva.es\" # Creamos el certificado autofirmado sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/C= $OPENSSL_COUNTRY /ST= $OPENSSL_PROVINCE /L= $OPENSSL_LOCALITY /O= $OPENSSL_ORGANIZATION /OU= $OPENSSL_ORGUNIT /CN= $OPENSSL_COMMON_NAME /emailAddress= $OPENSSL_EMAIL \"","title":"1.3 C\u00f3mo automatizar la creaci\u00f3n de un certificado autofirmado"},{"location":"Unidad_2/Practicas/Practica_2/#descarga-de-scripts-de-la-practica-2-unidad-2","text":"Aqu\u00ed puedes descargar los scripts necesarios para la pr\u00e1ctica. Descargar install_lamp.sh Descargar setup_selfsigned_certificate.sh","title":"Descarga de Scripts de la Pr\u00e1ctica 2 - Unidad 2"},{"location":"Unidad_2/Practicas/Practica_2/#14-como-consultar-la-informacion-del-sujeto-del-certificado","text":"$ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -subject","title":"1.4 C\u00f3mo consultar la informaci\u00f3n del sujeto del certificado"},{"location":"Unidad_2/Practicas/Practica_2/#15-como-consultar-la-fecha-de-caducidad-del-certificado","text":"$ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -dates","title":"1.5 C\u00f3mo consultar la fecha de caducidad del certificado"},{"location":"Unidad_2/Practicas/Practica_2/#16-configuracion-de-un-virtualhost-con-ssltsl-en-el-servidor-web-apache","text":"Paso 1 Editamos el archivo de configuraci\u00f3n del virtual host donde queremos habilitar el tr\u00e1fico HTTPS. En nuestro caso, utilizaremos el archivo de configuraci\u00f3n que tiene Apache por defecto para SSL/TLS, que est\u00e1 en la ruta: /etc/apache2/sites-available/default-ssl.conf. El contenido del archivo ser\u00e1 el siguiente: <VirtualHost *:443> ServerName iaw2425.org DocumentRoot /var/www/www.iaw2425.org/site DirectoryIndex index.php index.html SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost> Las directivas que hemos configurado son: - : Indica que este virtual host escuchar\u00e1 en el puerto 443 (HTTPS). - ServerName : Indica el nombre de dominio y se utiliza para indicar al servidor web Apache qu\u00e9 peticiones debe servir para este virtual host. En nuestro ejemplo estamos utilizando el dominio practicahttps.local. - DocumentRoot : Es la ruta donde se encuentra el directorio ra\u00edz del host virtual. - SSLEngine on : Configuramos que este virtual host utilizar\u00e1 SSL/TLS. - SSLCertificateFile : Indica la ruta donde se encuentra el certificado autofirmado. - SSLCertificateKeyFile : Indica la ruta donde se encuentra la clave privada del certificado autofirmado. Paso 2 Habilitamos el virtual host que acabamos de configurar. $ sudo a2ensite default-ssl.conf Paso 3 Habilitamos el m\u00f3dulo SSL en Apache. $ sudo a2enmod ssl Paso 4 Configuramos el virtual host de HTTP para que redirija todo el tr\u00e1fico a HTTPS. En nuestro caso, el virtual host que maneja las peticiones HTTP est\u00e1 en el archivo de configuraci\u00f3n que utiliza Apache por defecto para el puerto 80 :/etc/apache2/sites-available/000- default .conf. El contenido del archivo ser\u00e1 el siguiente: <VirtualHost *:80> #ServerName practica-https.local DocumentRoot/var/www/html #Redirige alpuerto 443 (HTTPS) RewriteEngineOn RewriteCond% { HTTPS } off RewriteRule^ https://% { HTTP_HOST } % { REQUEST_URI } [ L,R = 301 ] </VirtualHost> Paso 5 Para que el servidor web Apache pueda hacer la redirecci\u00f3n de HTTP a HTTPS es necesario habilitar el m\u00f3dulo rewrite en Apache. $ sudo a2enmod rewrite Paso 6 Reiniciamos el servicio de Apache.\u00e7 $ sudo systemctl restart apache2 Paso 7 Una vez llegado a este punto, es necesario comprobar que el puerto 443 est\u00e1 abierto en las reglas del firewall para permitir el tr\u00e1fico HTTPS. Paso 8 Accede desde un navegador web al nombre de dominio que acabas de configurar. En nuesro caso ser\u00e1: https://iaw245.org","title":"1.6 Configuraci\u00f3n de un VirtualHost con SSL/TSL en el servidor web Apache."},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/","text":"Practica 2: Certificado SSL/TLS Objetivos de la pr\u00e1ctica Crear un certificado SSL/TLS autofirmado con la herramienta openssl. Configurar el servidor web Apache para que utilice el certificado SSL/TLS autofirmado. 1. HTTPS. Creaci\u00f3n y configuraci\u00f3n de un certificado SSL/TLS autofirmado en Apache Nota El proceso de creaci\u00f3n de un certificado autofirmado consta de los siguientes pasos: Crear una clave privada y un certificado autofirmado. Configurar la clave privada y el certificado autofirmado en el servidor web. 1.1 Instalaci\u00f3n del servidor web Apache En primer lugar deberemos tener instado un servidor web Apache en nuestra m\u00e1quina. 1.2 Creaci\u00f3n del certificado autofirmado Para crear un certificado autofirmado vamos a utilizar la utilid openssl. Este es el comando que vamos a utilizar: $ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt Este comando nos genera un certificado autofirmado con una clave privada y un certificado autofirmado. 1.3 C\u00f3mo automatizar la creaci\u00f3n de un certificado autofirmado Para automatizar la creaci\u00f3n de un certificado autofirmado desde un script de Bash, podemos hacer uso del par\u00e1metro -subj que nos permite pasar los datos se adjuntan al certificado como argumentos desde la l\u00ednea de comandos. Ejemplo: #!/bin/bash set -x # Configuramos las variables con los datos que necesita el certificado OPENSSL_COUNTRY = \"ES\" OPENSSL_PROVINCE = \"Valencia\" OPENSSL_LOCALITY = \"Tavernes de la Valldigna\" OPENSSL_ORGANIZATION = \"IES Jaume II el Just\" OPENSSL_ORGUNIT = \"Departamento de Informatica\" OPENSSL_COMMON_NAME = \"iaw245.org\" OPENSSL_EMAIL = \"jorcormic@alu.edu.gva.es\" # Creamos el certificado autofirmado sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/C= $OPENSSL_COUNTRY /ST= $OPENSSL_PROVINCE /L= $OPENSSL_LOCALITY /O= $OPENSSL_ORGANIZATION /OU= $OPENSSL_ORGUNIT /CN= $OPENSSL_COMMON_NAME /emailAddress= $OPENSSL_EMAIL \" Descarga de Scripts de la Pr\u00e1ctica 2 - Unidad 2 Aqu\u00ed puedes descargar los scripts necesarios para la pr\u00e1ctica. Descargar install_lamp.sh Descargar setup_selfsigned_certificate.sh 1.4 C\u00f3mo consultar la informaci\u00f3n del sujeto del certificado $ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -subject 1.5 C\u00f3mo consultar la fecha de caducidad del certificado $ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -dates 1.6 Configuraci\u00f3n de un VirtualHost con SSL/TSL en el servidor web Apache. Paso 1 Editamos el archivo de configuraci\u00f3n del virtual host donde queremos habilitar el tr\u00e1fico HTTPS. En nuestro caso, utilizaremos el archivo de configuraci\u00f3n que tiene Apache por defecto para SSL/TLS, que est\u00e1 en la ruta: /etc/apache2/sites-available/default-ssl.conf. El contenido del archivo ser\u00e1 el siguiente: <VirtualHost *:443> ServerName iaw2425.org DocumentRoot /var/www/www.iaw2425.org/site DirectoryIndex index.php index.html SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost> Las directivas que hemos configurado son: - : Indica que este virtual host escuchar\u00e1 en el puerto 443 (HTTPS). - ServerName : Indica el nombre de dominio y se utiliza para indicar al servidor web Apache qu\u00e9 peticiones debe servir para este virtual host. En nuestro ejemplo estamos utilizando el dominio practicahttps.local. - DocumentRoot : Es la ruta donde se encuentra el directorio ra\u00edz del host virtual. - SSLEngine on : Configuramos que este virtual host utilizar\u00e1 SSL/TLS. - SSLCertificateFile : Indica la ruta donde se encuentra el certificado autofirmado. - SSLCertificateKeyFile : Indica la ruta donde se encuentra la clave privada del certificado autofirmado. Paso 2 Habilitamos el virtual host que acabamos de configurar. $ sudo a2ensite default-ssl.conf Paso 3 Habilitamos el m\u00f3dulo SSL en Apache. $ sudo a2enmod ssl Paso 4 Configuramos el virtual host de HTTP para que redirija todo el tr\u00e1fico a HTTPS. En nuestro caso, el virtual host que maneja las peticiones HTTP est\u00e1 en el archivo de configuraci\u00f3n que utiliza Apache por defecto para el puerto 80 :/etc/apache2/sites-available/000- default .conf. El contenido del archivo ser\u00e1 el siguiente: <VirtualHost *:80> #ServerName practica-https.local DocumentRoot/var/www/html #Redirige alpuerto 443 (HTTPS) RewriteEngineOn RewriteCond% { HTTPS } off RewriteRule^ https://% { HTTP_HOST } % { REQUEST_URI } [ L,R = 301 ] </VirtualHost> Paso 5 Para que el servidor web Apache pueda hacer la redirecci\u00f3n de HTTP a HTTPS es necesario habilitar el m\u00f3dulo rewrite en Apache. $ sudo a2enmod rewrite Paso 6 Reiniciamos el servicio de Apache.\u00e7 $ sudo systemctl restart apache2 Paso 7 Una vez llegado a este punto, es necesario comprobar que el puerto 443 est\u00e1 abierto en las reglas del firewall para permitir el tr\u00e1fico HTTPS. Paso 8 Accede desde un navegador web al nombre de dominio que acabas de configurar. En nuesro caso ser\u00e1: https://iaw245.org","title":"Practica 2: Apache Pr\u00e1ctica 2. Certificado SSL/TLS"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#practica-2-certificado-ssltls","text":"Objetivos de la pr\u00e1ctica Crear un certificado SSL/TLS autofirmado con la herramienta openssl. Configurar el servidor web Apache para que utilice el certificado SSL/TLS autofirmado.","title":"Practica 2: Certificado SSL/TLS"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#1-https-creacion-y-configuracion-de-un-certificado-ssltls-autofirmado-en-apache","text":"Nota El proceso de creaci\u00f3n de un certificado autofirmado consta de los siguientes pasos: Crear una clave privada y un certificado autofirmado. Configurar la clave privada y el certificado autofirmado en el servidor web.","title":"1.  HTTPS. Creaci\u00f3n y configuraci\u00f3n de un certificado SSL/TLS autofirmado en Apache"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#11-instalacion-del-servidor-web-apache","text":"En primer lugar deberemos tener instado un servidor web Apache en nuestra m\u00e1quina.","title":"1.1 Instalaci\u00f3n del servidor web Apache"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#12-creacion-del-certificado-autofirmado","text":"Para crear un certificado autofirmado vamos a utilizar la utilid openssl. Este es el comando que vamos a utilizar: $ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt Este comando nos genera un certificado autofirmado con una clave privada y un certificado autofirmado.","title":"1.2 Creaci\u00f3n del certificado autofirmado"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#13-como-automatizar-la-creacion-de-un-certificado-autofirmado","text":"Para automatizar la creaci\u00f3n de un certificado autofirmado desde un script de Bash, podemos hacer uso del par\u00e1metro -subj que nos permite pasar los datos se adjuntan al certificado como argumentos desde la l\u00ednea de comandos. Ejemplo: #!/bin/bash set -x # Configuramos las variables con los datos que necesita el certificado OPENSSL_COUNTRY = \"ES\" OPENSSL_PROVINCE = \"Valencia\" OPENSSL_LOCALITY = \"Tavernes de la Valldigna\" OPENSSL_ORGANIZATION = \"IES Jaume II el Just\" OPENSSL_ORGUNIT = \"Departamento de Informatica\" OPENSSL_COMMON_NAME = \"iaw245.org\" OPENSSL_EMAIL = \"jorcormic@alu.edu.gva.es\" # Creamos el certificado autofirmado sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/C= $OPENSSL_COUNTRY /ST= $OPENSSL_PROVINCE /L= $OPENSSL_LOCALITY /O= $OPENSSL_ORGANIZATION /OU= $OPENSSL_ORGUNIT /CN= $OPENSSL_COMMON_NAME /emailAddress= $OPENSSL_EMAIL \"","title":"1.3 C\u00f3mo automatizar la creaci\u00f3n de un certificado autofirmado"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#descarga-de-scripts-de-la-practica-2-unidad-2","text":"Aqu\u00ed puedes descargar los scripts necesarios para la pr\u00e1ctica. Descargar install_lamp.sh Descargar setup_selfsigned_certificate.sh","title":"Descarga de Scripts de la Pr\u00e1ctica 2 - Unidad 2"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#14-como-consultar-la-informacion-del-sujeto-del-certificado","text":"$ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -subject","title":"1.4 C\u00f3mo consultar la informaci\u00f3n del sujeto del certificado"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#15-como-consultar-la-fecha-de-caducidad-del-certificado","text":"$ openssl x509 -in /etc/ssl/certs/apache-selfsigned.crt -noout -dates","title":"1.5 C\u00f3mo consultar la fecha de caducidad del certificado"},{"location":"Unidad_2/Practicas/Practica_2/Practica_2/#16-configuracion-de-un-virtualhost-con-ssltsl-en-el-servidor-web-apache","text":"Paso 1 Editamos el archivo de configuraci\u00f3n del virtual host donde queremos habilitar el tr\u00e1fico HTTPS. En nuestro caso, utilizaremos el archivo de configuraci\u00f3n que tiene Apache por defecto para SSL/TLS, que est\u00e1 en la ruta: /etc/apache2/sites-available/default-ssl.conf. El contenido del archivo ser\u00e1 el siguiente: <VirtualHost *:443> ServerName iaw2425.org DocumentRoot /var/www/www.iaw2425.org/site DirectoryIndex index.php index.html SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost> Las directivas que hemos configurado son: - : Indica que este virtual host escuchar\u00e1 en el puerto 443 (HTTPS). - ServerName : Indica el nombre de dominio y se utiliza para indicar al servidor web Apache qu\u00e9 peticiones debe servir para este virtual host. En nuestro ejemplo estamos utilizando el dominio practicahttps.local. - DocumentRoot : Es la ruta donde se encuentra el directorio ra\u00edz del host virtual. - SSLEngine on : Configuramos que este virtual host utilizar\u00e1 SSL/TLS. - SSLCertificateFile : Indica la ruta donde se encuentra el certificado autofirmado. - SSLCertificateKeyFile : Indica la ruta donde se encuentra la clave privada del certificado autofirmado. Paso 2 Habilitamos el virtual host que acabamos de configurar. $ sudo a2ensite default-ssl.conf Paso 3 Habilitamos el m\u00f3dulo SSL en Apache. $ sudo a2enmod ssl Paso 4 Configuramos el virtual host de HTTP para que redirija todo el tr\u00e1fico a HTTPS. En nuestro caso, el virtual host que maneja las peticiones HTTP est\u00e1 en el archivo de configuraci\u00f3n que utiliza Apache por defecto para el puerto 80 :/etc/apache2/sites-available/000- default .conf. El contenido del archivo ser\u00e1 el siguiente: <VirtualHost *:80> #ServerName practica-https.local DocumentRoot/var/www/html #Redirige alpuerto 443 (HTTPS) RewriteEngineOn RewriteCond% { HTTPS } off RewriteRule^ https://% { HTTP_HOST } % { REQUEST_URI } [ L,R = 301 ] </VirtualHost> Paso 5 Para que el servidor web Apache pueda hacer la redirecci\u00f3n de HTTP a HTTPS es necesario habilitar el m\u00f3dulo rewrite en Apache. $ sudo a2enmod rewrite Paso 6 Reiniciamos el servicio de Apache.\u00e7 $ sudo systemctl restart apache2 Paso 7 Una vez llegado a este punto, es necesario comprobar que el puerto 443 est\u00e1 abierto en las reglas del firewall para permitir el tr\u00e1fico HTTPS. Paso 8 Accede desde un navegador web al nombre de dominio que acabas de configurar. En nuesro caso ser\u00e1: https://iaw245.org","title":"1.6 Configuraci\u00f3n de un VirtualHost con SSL/TSL en el servidor web Apache."}]}